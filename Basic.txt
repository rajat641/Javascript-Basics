- JS is lightwight - Doesn't eat much computer memmory and has simple syntax, features
- JS is cross-platform - Can be used not only for web but also for other purposes as well.
- JS is object oriented- Uses objects

- One of the three core in web with HTML CSS
- Before, used only on browser
- Now because of node.js, we can use JS on server as well
- Allows dynamic and interactive feature
- Rect/Angular/Jquery are 100% based on JS
- HTML sees content
- CSS is for styling/presentation
- JS  adds effect and dynamic nature
<p> </p> means a para- Noun- HTML
p{color:red;} - color the para- Adjective- CSS
p.hide() - hide para - Verb - Javascript
Use ES5 right now.
---------------------------------------------
5 differen primitive DT
primitive means - non object DT
1. Number -  always floating number ex 5 is like 5.0000
2. String 
3. Boolean - true/false
4.Undefined - Data type of a varible that does not have a value yet
5. Null - also means 'non-existent' - more specific
-----------------------------------------------------------
JS is dynamic typed . Here we don't have to define the type of variable like we do in C/Java. Like Python.
saves coding type but can lead to bugs
----------------------------------------------------------
Always give a meaning name to variables.
camelCase - firstname - lower case and later like upper case
---------------------------------------------------
ex - rajatSingh, firstName
var job;
console.log(job); --> undefined
----------------------------------------
Some rules:
- Var name can't start with a number. we can have a _ or $
 var john/mark---> dont work
- we cannot use reserve JS keywords
  var function or var delete won'y work as varible name
--------------------------------------------------------------
Type coercion : Data type is automatic converted to string
Automatic type conversion

Boolean -> string
UNDEFINED-> string

console.log('John'+ 28)
---------------------------------------------
Var Mutation

var age = 18
age = 'twenty eight'
-------------------------------------------------
Page keeps on loading until we click OK for an alert message.
alert("This is awesome").
alert is an alternative to console.log
-------------------------------------------------
In JS, opertors are like functions written in a special way
typeof - tells var type
---------------------------
Refer for Operator precendence on :
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

= or assignment as lowest precendence
Associativity decides the direction od execution of operators.
-----------------------------------
Ternary operator has 3 input
age >=18 ? console.log(name+ " can drink beer"): console.log('He can\'t drink beer');
------------------------------
USE SWITCH to avoid excessive if-else blocks
 use switch(true){
 	case age <13:
 		console.log('He is a boy');
 		break;
 }
 --------------------------------------------------

falsy values : undefined, null, 0, '', Nan// not a number
truthy vakues : NOT falsy values

var height;

if(height){
	console.log('varibale is defined')
}else{
	console.log('Variable is not defined')
}
-------------------------
use === to avoid bugs

=== -> strict equality conversion
== -> type coersion i.e data type need not to be matched

var height = 23;

if(height == '23'){
	console.log('the == operator does type coercion!!...');
}
-----------------------------------------
parseInt() -> gives output as Interger

JS happens to execute in sequence. Before rendering HTML, JS may execute.
so script tag must be put at last

prompt() is an inbuilt function.
every function is JS by default return undefined .
----------------------------------
Topics : Functions, Currying, Hoisting, Scope, Inheritance, Events and Error Handling.
------------------------------
Diff between JS expression and statements
JS expression results in somethings and produces some result
JS expression always produces a result
typeof(23)<-- expression
whereas statements dont immediate produce a value
if/else <-- statement
fucntion expression produces an immediate result whereas function declarations do  not.

-----------------------------------------------------
Arrays - Different DT are allowed inside array
push- append at back
pop - remove from back
unshift - append at front
shift - remove at front
indexOf - checks if a number is present in array
sort( comparator fxn)
sort(function(a, b){return b-a});
A method in JS is a fucntion belonging to a object;
----------------------------
arrays order matter whereas not in objects
objects are like struct in C;
objects can have vars, arrays, methods;

var x = new Array(20); // allocates memory dynamically

--------------------------------------------------

JS - 1995 known as Livescript
1997: ES1: first version of JS
2015: ES6: biggest update in Javascript
now every year a new version is released.
old browsers might not understand the newer version
so we use Transpiling and polyfiling to convert ES6(New version) to ES5;
Use ES6 compatability table
------------------------
var  vs let
var scope is not limited to the block but only limited to the function
let is limited to block
var is little different 
let, const => block scoped
var => function-scoped
 var is defined outside a function so its attached to window object of browser.
 window object is huge; This is not a case with let.
 object is gnerally global so its bad to define var outside as there can be over-writing.
 window.user_defined_method()=> bad practice.
 +++++++++++++++++++++++++
 const is same as let but it doesn't allow to change the object but we can change its property.

 const x = 1;
 x = 2; //error

 const x = {name:'rajat'};
 x.name = 'rajat' // works fine.
 ++++++++++++++++++++++++++++++++++++++++++++++